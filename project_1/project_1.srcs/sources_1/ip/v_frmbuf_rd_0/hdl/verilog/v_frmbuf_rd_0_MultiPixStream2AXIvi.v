// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module v_frmbuf_rd_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        StrmMPix_V_val_0_V_dout,
        StrmMPix_V_val_0_V_empty_n,
        StrmMPix_V_val_0_V_read,
        StrmMPix_V_val_1_V_dout,
        StrmMPix_V_val_1_V_empty_n,
        StrmMPix_V_val_1_V_read,
        StrmMPix_V_val_2_V_dout,
        StrmMPix_V_val_2_V_empty_n,
        StrmMPix_V_val_2_V_read,
        StrmMPix_V_val_3_V_dout,
        StrmMPix_V_val_3_V_empty_n,
        StrmMPix_V_val_3_V_read,
        StrmMPix_V_val_4_V_dout,
        StrmMPix_V_val_4_V_empty_n,
        StrmMPix_V_val_4_V_read,
        StrmMPix_V_val_5_V_dout,
        StrmMPix_V_val_5_V_empty_n,
        StrmMPix_V_val_5_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height,
        WidthOut,
        trunc_ln139_loc_dout,
        trunc_ln139_loc_empty_n,
        trunc_ln139_loc_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] StrmMPix_V_val_0_V_dout;
input   StrmMPix_V_val_0_V_empty_n;
output   StrmMPix_V_val_0_V_read;
input  [7:0] StrmMPix_V_val_1_V_dout;
input   StrmMPix_V_val_1_V_empty_n;
output   StrmMPix_V_val_1_V_read;
input  [7:0] StrmMPix_V_val_2_V_dout;
input   StrmMPix_V_val_2_V_empty_n;
output   StrmMPix_V_val_2_V_read;
input  [7:0] StrmMPix_V_val_3_V_dout;
input   StrmMPix_V_val_3_V_empty_n;
output   StrmMPix_V_val_3_V_read;
input  [7:0] StrmMPix_V_val_4_V_dout;
input   StrmMPix_V_val_4_V_empty_n;
output   StrmMPix_V_val_4_V_read;
input  [7:0] StrmMPix_V_val_5_V_dout;
input   StrmMPix_V_val_5_V_empty_n;
output   StrmMPix_V_val_5_V_read;
output  [47:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [5:0] m_axis_video_TKEEP;
output  [5:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] Height;
input  [15:0] WidthOut;
input  [2:0] trunc_ln139_loc_dout;
input   trunc_ln139_loc_empty_n;
output   trunc_ln139_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg StrmMPix_V_val_0_V_read;
reg StrmMPix_V_val_1_V_read;
reg StrmMPix_V_val_2_V_read;
reg StrmMPix_V_val_3_V_read;
reg StrmMPix_V_val_4_V_read;
reg StrmMPix_V_val_5_V_read;
reg trunc_ln139_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [47:0] AXI_video_strm_V_data_V_1_data_out;
reg    AXI_video_strm_V_data_V_1_vld_in;
wire    AXI_video_strm_V_data_V_1_vld_out;
wire    AXI_video_strm_V_data_V_1_ack_in;
wire    AXI_video_strm_V_data_V_1_ack_out;
reg   [47:0] AXI_video_strm_V_data_V_1_payload_A;
reg   [47:0] AXI_video_strm_V_data_V_1_payload_B;
reg    AXI_video_strm_V_data_V_1_sel_rd;
reg    AXI_video_strm_V_data_V_1_sel_wr;
wire    AXI_video_strm_V_data_V_1_sel;
wire    AXI_video_strm_V_data_V_1_load_A;
wire    AXI_video_strm_V_data_V_1_load_B;
reg   [1:0] AXI_video_strm_V_data_V_1_state;
wire    AXI_video_strm_V_data_V_1_state_cmp_full;
wire   [5:0] AXI_video_strm_V_keep_V_1_data_out;
reg    AXI_video_strm_V_keep_V_1_vld_in;
wire    AXI_video_strm_V_keep_V_1_vld_out;
wire    AXI_video_strm_V_keep_V_1_ack_out;
reg    AXI_video_strm_V_keep_V_1_sel_rd;
wire    AXI_video_strm_V_keep_V_1_sel;
reg   [1:0] AXI_video_strm_V_keep_V_1_state;
wire   [5:0] AXI_video_strm_V_strb_V_1_data_out;
reg    AXI_video_strm_V_strb_V_1_vld_in;
wire    AXI_video_strm_V_strb_V_1_vld_out;
wire    AXI_video_strm_V_strb_V_1_ack_out;
reg    AXI_video_strm_V_strb_V_1_sel_rd;
wire    AXI_video_strm_V_strb_V_1_sel;
reg   [1:0] AXI_video_strm_V_strb_V_1_state;
reg   [0:0] AXI_video_strm_V_user_V_1_data_out;
reg    AXI_video_strm_V_user_V_1_vld_in;
wire    AXI_video_strm_V_user_V_1_vld_out;
wire    AXI_video_strm_V_user_V_1_ack_in;
wire    AXI_video_strm_V_user_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_B;
reg    AXI_video_strm_V_user_V_1_sel_rd;
reg    AXI_video_strm_V_user_V_1_sel_wr;
wire    AXI_video_strm_V_user_V_1_sel;
wire    AXI_video_strm_V_user_V_1_load_A;
wire    AXI_video_strm_V_user_V_1_load_B;
reg   [1:0] AXI_video_strm_V_user_V_1_state;
wire    AXI_video_strm_V_user_V_1_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_1_data_out;
reg    AXI_video_strm_V_last_V_1_vld_in;
wire    AXI_video_strm_V_last_V_1_vld_out;
wire    AXI_video_strm_V_last_V_1_ack_in;
wire    AXI_video_strm_V_last_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_B;
reg    AXI_video_strm_V_last_V_1_sel_rd;
reg    AXI_video_strm_V_last_V_1_sel_wr;
wire    AXI_video_strm_V_last_V_1_sel;
wire    AXI_video_strm_V_last_V_1_load_A;
wire    AXI_video_strm_V_last_V_1_load_B;
reg   [1:0] AXI_video_strm_V_last_V_1_state;
wire    AXI_video_strm_V_last_V_1_state_cmp_full;
wire   [0:0] AXI_video_strm_V_id_V_1_data_out;
reg    AXI_video_strm_V_id_V_1_vld_in;
wire    AXI_video_strm_V_id_V_1_vld_out;
wire    AXI_video_strm_V_id_V_1_ack_out;
reg    AXI_video_strm_V_id_V_1_sel_rd;
wire    AXI_video_strm_V_id_V_1_sel;
reg   [1:0] AXI_video_strm_V_id_V_1_state;
wire   [0:0] AXI_video_strm_V_dest_V_1_data_out;
reg    AXI_video_strm_V_dest_V_1_vld_in;
wire    AXI_video_strm_V_dest_V_1_vld_out;
wire    AXI_video_strm_V_dest_V_1_ack_out;
reg    AXI_video_strm_V_dest_V_1_sel_rd;
wire    AXI_video_strm_V_dest_V_1_sel;
reg   [1:0] AXI_video_strm_V_dest_V_1_state;
wire   [4:0] mapComp_address0;
reg    mapComp_ce0;
wire   [2:0] mapComp_q0;
reg    StrmMPix_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln221_reg_823;
reg    StrmMPix_V_val_1_V_blk_n;
reg    StrmMPix_V_val_2_V_blk_n;
reg    StrmMPix_V_val_3_V_blk_n;
reg    StrmMPix_V_val_4_V_blk_n;
reg    StrmMPix_V_val_5_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln221_reg_823_pp0_iter1_reg;
reg    trunc_ln139_loc_blk_n;
wire    ap_CS_fsm_state2;
reg   [14:0] j_0_i_i_reg_335;
reg    ap_block_state1;
wire   [15:0] grp_reg_unsigned_short_s_fu_346_ap_return;
reg   [15:0] tmp_i_i_reg_739;
wire    grp_reg_unsigned_short_s_fu_346_ap_ready;
wire    grp_reg_unsigned_short_s_fu_346_ap_done;
wire    grp_reg_unsigned_short_s_fu_352_ap_ready;
wire    grp_reg_unsigned_short_s_fu_352_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [15:0] grp_reg_unsigned_short_s_fu_352_ap_return;
reg   [15:0] tmp_1_i_i_reg_744;
wire   [5:0] sub_ln321_fu_378_p2;
reg   [5:0] sub_ln321_reg_749;
wire   [2:0] i_fu_390_p2;
reg   [2:0] i_reg_757;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln213_fu_384_p2;
wire   [14:0] lshr_ln_fu_428_p4;
reg   [14:0] lshr_ln_reg_774;
wire   [15:0] add_ln234_fu_441_p2;
reg   [15:0] add_ln234_reg_779;
wire   [2:0] trunc_ln215_fu_447_p1;
reg   [2:0] trunc_ln215_reg_784;
wire   [2:0] trunc_ln215_1_fu_451_p1;
reg   [2:0] trunc_ln215_1_reg_789;
wire   [2:0] trunc_ln215_2_fu_455_p1;
reg   [2:0] trunc_ln215_2_reg_794;
wire   [2:0] trunc_ln215_3_fu_459_p1;
reg   [2:0] trunc_ln215_3_reg_799;
wire   [2:0] trunc_ln215_4_fu_463_p1;
reg   [2:0] trunc_ln215_4_reg_804;
wire   [2:0] trunc_ln215_5_fu_467_p1;
reg   [2:0] trunc_ln215_5_reg_809;
wire   [0:0] icmp_ln219_fu_510_p2;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
wire   [15:0] i_1_fu_515_p2;
reg   [15:0] i_1_reg_818;
wire   [0:0] icmp_ln221_fu_525_p2;
wire    ap_block_state6_pp0_stage0_iter0;
wire    io_acc_block_signal_op102;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_state7_io;
wire    ap_block_state8_pp0_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage0_11001;
wire   [14:0] j_fu_530_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_536_p2;
reg   [0:0] tmp_last_V_reg_832;
wire   [47:0] tmp_data_V_fu_671_p7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire    grp_reg_unsigned_short_s_fu_346_ap_start;
wire    grp_reg_unsigned_short_s_fu_346_ap_idle;
wire    grp_reg_unsigned_short_s_fu_352_ap_start;
wire    grp_reg_unsigned_short_s_fu_352_ap_idle;
reg   [2:0] i_0_i_i_reg_312;
wire    ap_CS_fsm_state4;
reg   [15:0] i1_0_i_i_reg_324;
wire    ap_CS_fsm_state9;
reg    grp_reg_unsigned_short_s_fu_346_ap_start_reg;
reg    ap_block_state1_ignore_call24;
reg    grp_reg_unsigned_short_s_fu_352_ap_start_reg;
reg    ap_block_state1_ignore_call25;
wire  signed [63:0] sext_ln321_fu_405_p1;
reg   [4:0] map_V_0_06_i_i_fu_208;
wire   [4:0] zext_ln321_2_fu_476_p1;
reg   [4:0] map_V_1_07_i_i_fu_212;
reg   [4:0] map_V_2_08_i_i_fu_216;
reg   [4:0] map_V_3_09_i_i_fu_220;
reg   [4:0] map_V_4_010_i_i_fu_224;
reg   [4:0] map_V_5_011_i_i_fu_228;
reg   [0:0] tmp_user_V_fu_232;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] tmp_7_fu_366_p3;
wire   [5:0] tmp_6_fu_358_p3;
wire   [5:0] zext_ln321_fu_374_p1;
wire   [5:0] zext_ln321_1_fu_396_p1;
wire   [5:0] add_ln321_fu_400_p2;
wire   [15:0] zext_ln221_1_fu_437_p1;
wire   [15:0] zext_ln221_fu_521_p1;
wire   [7:0] tmp_5_fu_654_p8;
wire   [7:0] tmp_4_fu_637_p8;
wire   [7:0] tmp_3_fu_620_p8;
wire   [7:0] tmp_2_fu_603_p8;
wire   [7:0] tmp_1_fu_586_p8;
wire   [7:0] tmp_fu_569_p8;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 AXI_video_strm_V_data_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_1_state = 2'd0;
#0 AXI_video_strm_V_keep_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_keep_V_1_state = 2'd0;
#0 AXI_video_strm_V_strb_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_strb_V_1_state = 2'd0;
#0 AXI_video_strm_V_user_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_1_state = 2'd0;
#0 AXI_video_strm_V_last_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_1_state = 2'd0;
#0 AXI_video_strm_V_id_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_id_V_1_state = 2'd0;
#0 AXI_video_strm_V_dest_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_346_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_352_ap_start_reg = 1'b0;
end

v_frmbuf_rd_0_MultiPixStream2AXfYi #(
    .DataWidth( 3 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

v_frmbuf_rd_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_346(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_346_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_346_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_346_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_346_ap_ready),
    .in_r(Height),
    .ap_return(grp_reg_unsigned_short_s_fu_346_ap_return)
);

v_frmbuf_rd_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_352(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_352_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_352_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_352_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_352_ap_ready),
    .in_r(WidthOut),
    .ap_return(grp_reg_unsigned_short_s_fu_352_ap_return)
);

v_frmbuf_rd_0_v_frmbuf_rd_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_6g8j_U33(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(StrmMPix_V_val_3_V_dout),
    .din4(StrmMPix_V_val_4_V_dout),
    .din5(StrmMPix_V_val_5_V_dout),
    .din6(trunc_ln215_reg_784),
    .dout(tmp_fu_569_p8)
);

v_frmbuf_rd_0_v_frmbuf_rd_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_6g8j_U34(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(StrmMPix_V_val_3_V_dout),
    .din4(StrmMPix_V_val_4_V_dout),
    .din5(StrmMPix_V_val_5_V_dout),
    .din6(trunc_ln215_1_reg_789),
    .dout(tmp_1_fu_586_p8)
);

v_frmbuf_rd_0_v_frmbuf_rd_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_6g8j_U35(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(StrmMPix_V_val_3_V_dout),
    .din4(StrmMPix_V_val_4_V_dout),
    .din5(StrmMPix_V_val_5_V_dout),
    .din6(trunc_ln215_2_reg_794),
    .dout(tmp_2_fu_603_p8)
);

v_frmbuf_rd_0_v_frmbuf_rd_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_6g8j_U36(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(StrmMPix_V_val_3_V_dout),
    .din4(StrmMPix_V_val_4_V_dout),
    .din5(StrmMPix_V_val_5_V_dout),
    .din6(trunc_ln215_3_reg_799),
    .dout(tmp_3_fu_620_p8)
);

v_frmbuf_rd_0_v_frmbuf_rd_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_6g8j_U37(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(StrmMPix_V_val_3_V_dout),
    .din4(StrmMPix_V_val_4_V_dout),
    .din5(StrmMPix_V_val_5_V_dout),
    .din6(trunc_ln215_4_reg_804),
    .dout(tmp_4_fu_637_p8)
);

v_frmbuf_rd_0_v_frmbuf_rd_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_6g8j_U38(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(StrmMPix_V_val_3_V_dout),
    .din4(StrmMPix_V_val_4_V_dout),
    .din5(StrmMPix_V_val_5_V_dout),
    .din6(trunc_ln215_5_reg_809),
    .dout(tmp_5_fu_654_p8)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_out))) begin
            AXI_video_strm_V_data_V_1_sel_rd <= ~AXI_video_strm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_in) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in))) begin
            AXI_video_strm_V_data_V_1_sel_wr <= ~AXI_video_strm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_data_V_1_state)) | ((2'd1 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_out))) begin
            AXI_video_strm_V_dest_V_1_sel_rd <= ~AXI_video_strm_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_dest_V_1_state)) | ((2'd1 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_out))) begin
            AXI_video_strm_V_id_V_1_sel_rd <= ~AXI_video_strm_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_id_V_1_state)) | ((2'd1 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_out))) begin
            AXI_video_strm_V_keep_V_1_sel_rd <= ~AXI_video_strm_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_keep_V_1_state)) | ((2'd1 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_out))) begin
            AXI_video_strm_V_last_V_1_sel_rd <= ~AXI_video_strm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_in) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in))) begin
            AXI_video_strm_V_last_V_1_sel_wr <= ~AXI_video_strm_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_last_V_1_state)) | ((2'd1 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_out))) begin
            AXI_video_strm_V_strb_V_1_sel_rd <= ~AXI_video_strm_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_strb_V_1_state)) | ((2'd1 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_out))) begin
            AXI_video_strm_V_user_V_1_sel_rd <= ~AXI_video_strm_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_in) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in))) begin
            AXI_video_strm_V_user_V_1_sel_wr <= ~AXI_video_strm_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_user_V_1_state)) | ((2'd1 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_346_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_346_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_346_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_346_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_352_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_352_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_352_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_352_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_0_i_i_reg_324 <= i_1_reg_818;
    end else if (((icmp_ln213_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_0_i_i_reg_324 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_i_reg_312 <= i_reg_757;
    end else if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_i_reg_312 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_i_i_reg_335 <= 15'd0;
    end else if (((icmp_ln221_fu_525_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_i_i_reg_335 <= j_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_232 <= 1'd0;
    end else if (((icmp_ln213_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_user_V_fu_232 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_A)) begin
        AXI_video_strm_V_data_V_1_payload_A <= tmp_data_V_fu_671_p7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_B)) begin
        AXI_video_strm_V_data_V_1_payload_B <= tmp_data_V_fu_671_p7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_A)) begin
        AXI_video_strm_V_last_V_1_payload_A <= tmp_last_V_reg_832;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_B)) begin
        AXI_video_strm_V_last_V_1_payload_B <= tmp_last_V_reg_832;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_A)) begin
        AXI_video_strm_V_user_V_1_payload_A <= tmp_user_V_fu_232;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_B)) begin
        AXI_video_strm_V_user_V_1_payload_B <= tmp_user_V_fu_232;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln213_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln234_reg_779 <= add_ln234_fu_441_p2;
        lshr_ln_reg_774 <= {{tmp_1_i_i_reg_744[15:1]}};
        trunc_ln215_1_reg_789 <= trunc_ln215_1_fu_451_p1;
        trunc_ln215_2_reg_794 <= trunc_ln215_2_fu_455_p1;
        trunc_ln215_3_reg_799 <= trunc_ln215_3_fu_459_p1;
        trunc_ln215_4_reg_804 <= trunc_ln215_4_fu_463_p1;
        trunc_ln215_5_reg_809 <= trunc_ln215_5_fu_467_p1;
        trunc_ln215_reg_784 <= trunc_ln215_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_818 <= i_1_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_757 <= i_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln221_reg_823 <= icmp_ln221_fu_525_p2;
        icmp_ln221_reg_823_pp0_iter1_reg <= icmp_ln221_reg_823;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_i_reg_312 == 3'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_0_06_i_i_fu_208[2 : 0] <= zext_ln321_2_fu_476_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_i_reg_312 == 3'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_1_07_i_i_fu_212[2 : 0] <= zext_ln321_2_fu_476_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_i_reg_312 == 3'd2) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_2_08_i_i_fu_216[2 : 0] <= zext_ln321_2_fu_476_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_i_reg_312 == 3'd3) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_3_09_i_i_fu_220[2 : 0] <= zext_ln321_2_fu_476_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_i_reg_312 == 3'd4) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_4_010_i_i_fu_224[2 : 0] <= zext_ln321_2_fu_476_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((i_0_i_i_reg_312 == 3'd5) | ((i_0_i_i_reg_312 == 3'd6) | (i_0_i_i_reg_312 == 3'd7))))) begin
        map_V_5_011_i_i_fu_228[2 : 0] <= zext_ln321_2_fu_476_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln321_reg_749[5 : 1] <= sub_ln321_fu_378_p2[5 : 1];
        tmp_1_i_i_reg_744 <= grp_reg_unsigned_short_s_fu_352_ap_return;
        tmp_i_i_reg_739 <= grp_reg_unsigned_short_s_fu_346_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_fu_525_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_832 <= tmp_last_V_fu_536_p2;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_sel)) begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_B;
    end else begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_sel)) begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_B;
    end else begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_sel)) begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_B;
    end else begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_0_V_blk_n = StrmMPix_V_val_0_V_empty_n;
    end else begin
        StrmMPix_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_0_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_1_V_blk_n = StrmMPix_V_val_1_V_empty_n;
    end else begin
        StrmMPix_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_1_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_2_V_blk_n = StrmMPix_V_val_2_V_empty_n;
    end else begin
        StrmMPix_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_2_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_3_V_blk_n = StrmMPix_V_val_3_V_empty_n;
    end else begin
        StrmMPix_V_val_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_3_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_4_V_blk_n = StrmMPix_V_val_4_V_empty_n;
    end else begin
        StrmMPix_V_val_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_4_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_5_V_blk_n = StrmMPix_V_val_5_V_empty_n;
    end else begin
        StrmMPix_V_val_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_5_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln221_fu_525_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln221_reg_823_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln221_reg_823 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = AXI_video_strm_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln139_loc_blk_n = trunc_ln139_loc_empty_n;
    end else begin
        trunc_ln139_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln139_loc_read = 1'b1;
    end else begin
        trunc_ln139_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln213_fu_384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln219_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln221_fu_525_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln221_fu_525_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_1_ack_in = AXI_video_strm_V_data_V_1_state[1'd1];

assign AXI_video_strm_V_data_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_data_V_1_load_A = (~AXI_video_strm_V_data_V_1_sel_wr & AXI_video_strm_V_data_V_1_state_cmp_full);

assign AXI_video_strm_V_data_V_1_load_B = (AXI_video_strm_V_data_V_1_state_cmp_full & AXI_video_strm_V_data_V_1_sel_wr);

assign AXI_video_strm_V_data_V_1_sel = AXI_video_strm_V_data_V_1_sel_rd;

assign AXI_video_strm_V_data_V_1_state_cmp_full = ((AXI_video_strm_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_1_vld_out = AXI_video_strm_V_data_V_1_state[1'd0];

assign AXI_video_strm_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_dest_V_1_data_out = 1'd0;

assign AXI_video_strm_V_dest_V_1_sel = AXI_video_strm_V_dest_V_1_sel_rd;

assign AXI_video_strm_V_dest_V_1_vld_out = AXI_video_strm_V_dest_V_1_state[1'd0];

assign AXI_video_strm_V_id_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_id_V_1_data_out = 1'd0;

assign AXI_video_strm_V_id_V_1_sel = AXI_video_strm_V_id_V_1_sel_rd;

assign AXI_video_strm_V_id_V_1_vld_out = AXI_video_strm_V_id_V_1_state[1'd0];

assign AXI_video_strm_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_keep_V_1_data_out = 6'd63;

assign AXI_video_strm_V_keep_V_1_sel = AXI_video_strm_V_keep_V_1_sel_rd;

assign AXI_video_strm_V_keep_V_1_vld_out = AXI_video_strm_V_keep_V_1_state[1'd0];

assign AXI_video_strm_V_last_V_1_ack_in = AXI_video_strm_V_last_V_1_state[1'd1];

assign AXI_video_strm_V_last_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_last_V_1_load_A = (~AXI_video_strm_V_last_V_1_sel_wr & AXI_video_strm_V_last_V_1_state_cmp_full);

assign AXI_video_strm_V_last_V_1_load_B = (AXI_video_strm_V_last_V_1_state_cmp_full & AXI_video_strm_V_last_V_1_sel_wr);

assign AXI_video_strm_V_last_V_1_sel = AXI_video_strm_V_last_V_1_sel_rd;

assign AXI_video_strm_V_last_V_1_state_cmp_full = ((AXI_video_strm_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_1_vld_out = AXI_video_strm_V_last_V_1_state[1'd0];

assign AXI_video_strm_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_strb_V_1_data_out = 6'd0;

assign AXI_video_strm_V_strb_V_1_sel = AXI_video_strm_V_strb_V_1_sel_rd;

assign AXI_video_strm_V_strb_V_1_vld_out = AXI_video_strm_V_strb_V_1_state[1'd0];

assign AXI_video_strm_V_user_V_1_ack_in = AXI_video_strm_V_user_V_1_state[1'd1];

assign AXI_video_strm_V_user_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_user_V_1_load_A = (~AXI_video_strm_V_user_V_1_sel_wr & AXI_video_strm_V_user_V_1_state_cmp_full);

assign AXI_video_strm_V_user_V_1_load_B = (AXI_video_strm_V_user_V_1_state_cmp_full & AXI_video_strm_V_user_V_1_sel_wr);

assign AXI_video_strm_V_user_V_1_sel = AXI_video_strm_V_user_V_1_sel_rd;

assign AXI_video_strm_V_user_V_1_state_cmp_full = ((AXI_video_strm_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_1_vld_out = AXI_video_strm_V_user_V_1_state[1'd0];

assign add_ln234_fu_441_p2 = ($signed(16'd65535) + $signed(zext_ln221_1_fu_437_p1));

assign add_ln321_fu_400_p2 = (sub_ln321_reg_749 + zext_ln321_1_fu_396_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln221_reg_823 == 1'd0) & (io_acc_block_signal_op102 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln221_reg_823 == 1'd0) & (io_acc_block_signal_op102 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln221_reg_823 == 1'd0) & (io_acc_block_signal_op102 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call24 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call25 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_352_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_346_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0)));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln221_reg_823 == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((icmp_ln221_reg_823 == 1'd0) & (io_acc_block_signal_op102 == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = ((icmp_ln221_reg_823_pp0_iter1_reg == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_reg_unsigned_short_s_fu_346_ap_start = grp_reg_unsigned_short_s_fu_346_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_352_ap_start = grp_reg_unsigned_short_s_fu_352_ap_start_reg;

assign i_1_fu_515_p2 = (i1_0_i_i_reg_324 + 16'd1);

assign i_fu_390_p2 = (i_0_i_i_reg_312 + 3'd1);

assign icmp_ln213_fu_384_p2 = ((i_0_i_i_reg_312 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_510_p2 = ((i1_0_i_i_reg_324 == tmp_i_i_reg_739) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_525_p2 = ((j_0_i_i_reg_335 == lshr_ln_reg_774) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op102 = (StrmMPix_V_val_5_V_empty_n & StrmMPix_V_val_4_V_empty_n & StrmMPix_V_val_3_V_empty_n & StrmMPix_V_val_2_V_empty_n & StrmMPix_V_val_1_V_empty_n & StrmMPix_V_val_0_V_empty_n);

assign j_fu_530_p2 = (j_0_i_i_reg_335 + 15'd1);

assign lshr_ln_fu_428_p4 = {{tmp_1_i_i_reg_744[15:1]}};

assign m_axis_video_TDATA = AXI_video_strm_V_data_V_1_data_out;

assign m_axis_video_TDEST = AXI_video_strm_V_dest_V_1_data_out;

assign m_axis_video_TID = AXI_video_strm_V_id_V_1_data_out;

assign m_axis_video_TKEEP = AXI_video_strm_V_keep_V_1_data_out;

assign m_axis_video_TLAST = AXI_video_strm_V_last_V_1_data_out;

assign m_axis_video_TSTRB = AXI_video_strm_V_strb_V_1_data_out;

assign m_axis_video_TUSER = AXI_video_strm_V_user_V_1_data_out;

assign m_axis_video_TVALID = AXI_video_strm_V_dest_V_1_state[1'd0];

assign mapComp_address0 = sext_ln321_fu_405_p1;

assign sext_ln321_fu_405_p1 = $signed(add_ln321_fu_400_p2);

assign sub_ln321_fu_378_p2 = (tmp_6_fu_358_p3 - zext_ln321_fu_374_p1);

assign tmp_6_fu_358_p3 = {{trunc_ln139_loc_dout}, {3'd0}};

assign tmp_7_fu_366_p3 = {{trunc_ln139_loc_dout}, {1'd0}};

assign tmp_data_V_fu_671_p7 = {{{{{{tmp_5_fu_654_p8}, {tmp_4_fu_637_p8}}, {tmp_3_fu_620_p8}}, {tmp_2_fu_603_p8}}, {tmp_1_fu_586_p8}}, {tmp_fu_569_p8}};

assign tmp_last_V_fu_536_p2 = ((zext_ln221_fu_521_p1 == add_ln234_reg_779) ? 1'b1 : 1'b0);

assign trunc_ln215_1_fu_451_p1 = map_V_1_07_i_i_fu_212[2:0];

assign trunc_ln215_2_fu_455_p1 = map_V_2_08_i_i_fu_216[2:0];

assign trunc_ln215_3_fu_459_p1 = map_V_3_09_i_i_fu_220[2:0];

assign trunc_ln215_4_fu_463_p1 = map_V_4_010_i_i_fu_224[2:0];

assign trunc_ln215_5_fu_467_p1 = map_V_5_011_i_i_fu_228[2:0];

assign trunc_ln215_fu_447_p1 = map_V_0_06_i_i_fu_208[2:0];

assign zext_ln221_1_fu_437_p1 = lshr_ln_fu_428_p4;

assign zext_ln221_fu_521_p1 = j_0_i_i_reg_335;

assign zext_ln321_1_fu_396_p1 = i_0_i_i_reg_312;

assign zext_ln321_2_fu_476_p1 = mapComp_q0;

assign zext_ln321_fu_374_p1 = tmp_7_fu_366_p3;

always @ (posedge ap_clk) begin
    sub_ln321_reg_749[0] <= 1'b0;
    map_V_0_06_i_i_fu_208[4:3] <= 2'b00;
    map_V_1_07_i_i_fu_212[4:3] <= 2'b00;
    map_V_2_08_i_i_fu_216[4:3] <= 2'b00;
    map_V_3_09_i_i_fu_220[4:3] <= 2'b00;
    map_V_4_010_i_i_fu_224[4:3] <= 2'b00;
    map_V_5_011_i_i_fu_228[4:3] <= 2'b00;
end

endmodule //v_frmbuf_rd_0_MultiPixStream2AXIvi
